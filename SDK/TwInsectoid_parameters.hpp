#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TwInsectoid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TwInsectoid_structs.hpp"


namespace SDK::Params
{

// Function TwInsectoid.TwInsectoidSubsystem.OnWorldCreation
// 0x0008 (0x0008 - 0x0000)
struct TwInsectoidSubsystem_OnWorldCreation final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidSubsystem_OnWorldCreation) == 0x000008, "Wrong alignment on TwInsectoidSubsystem_OnWorldCreation");
static_assert(sizeof(TwInsectoidSubsystem_OnWorldCreation) == 0x000008, "Wrong size on TwInsectoidSubsystem_OnWorldCreation");
static_assert(offsetof(TwInsectoidSubsystem_OnWorldCreation, World) == 0x000000, "Member 'TwInsectoidSubsystem_OnWorldCreation::World' has a wrong offset!");

// Function TwInsectoid.TwInsectoidWidget.AcceptScreenshot
// 0x0018 (0x0018 - 0x0000)
struct TwInsectoidWidget_AcceptScreenshot final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Image;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidWidget_AcceptScreenshot) == 0x000008, "Wrong alignment on TwInsectoidWidget_AcceptScreenshot");
static_assert(sizeof(TwInsectoidWidget_AcceptScreenshot) == 0x000018, "Wrong size on TwInsectoidWidget_AcceptScreenshot");
static_assert(offsetof(TwInsectoidWidget_AcceptScreenshot, SizeX) == 0x000000, "Member 'TwInsectoidWidget_AcceptScreenshot::SizeX' has a wrong offset!");
static_assert(offsetof(TwInsectoidWidget_AcceptScreenshot, SizeY) == 0x000004, "Member 'TwInsectoidWidget_AcceptScreenshot::SizeY' has a wrong offset!");
static_assert(offsetof(TwInsectoidWidget_AcceptScreenshot, Image) == 0x000008, "Member 'TwInsectoidWidget_AcceptScreenshot::Image' has a wrong offset!");

// Function TwInsectoid.TwInsectoidWidget.OnRequestComplete
// 0x0001 (0x0001 - 0x0000)
struct TwInsectoidWidget_OnRequestComplete final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidWidget_OnRequestComplete) == 0x000001, "Wrong alignment on TwInsectoidWidget_OnRequestComplete");
static_assert(sizeof(TwInsectoidWidget_OnRequestComplete) == 0x000001, "Wrong size on TwInsectoidWidget_OnRequestComplete");
static_assert(offsetof(TwInsectoidWidget_OnRequestComplete, Result) == 0x000000, "Member 'TwInsectoidWidget_OnRequestComplete::Result' has a wrong offset!");

// Function TwInsectoid.TwInsectoidWidget.OnSubmitFinished
// 0x0001 (0x0001 - 0x0000)
struct TwInsectoidWidget_OnSubmitFinished final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidWidget_OnSubmitFinished) == 0x000001, "Wrong alignment on TwInsectoidWidget_OnSubmitFinished");
static_assert(sizeof(TwInsectoidWidget_OnSubmitFinished) == 0x000001, "Wrong size on TwInsectoidWidget_OnSubmitFinished");
static_assert(offsetof(TwInsectoidWidget_OnSubmitFinished, bSuccess) == 0x000000, "Member 'TwInsectoidWidget_OnSubmitFinished::bSuccess' has a wrong offset!");

// Function TwInsectoid.TwInsectoidWidget.SubmitReport
// 0x00D8 (0x00D8 - 0x0000)
struct TwInsectoidWidget_SubmitReport final
{
public:
	struct FReportData                            InReport;                                          // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidWidget_SubmitReport) == 0x000008, "Wrong alignment on TwInsectoidWidget_SubmitReport");
static_assert(sizeof(TwInsectoidWidget_SubmitReport) == 0x0000D8, "Wrong size on TwInsectoidWidget_SubmitReport");
static_assert(offsetof(TwInsectoidWidget_SubmitReport, InReport) == 0x000000, "Member 'TwInsectoidWidget_SubmitReport::InReport' has a wrong offset!");

// Function TwInsectoid.TwInsectoidFunctionLibrary.IsInsectoidEnabled
// 0x0001 (0x0001 - 0x0000)
struct TwInsectoidFunctionLibrary_IsInsectoidEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidFunctionLibrary_IsInsectoidEnabled) == 0x000001, "Wrong alignment on TwInsectoidFunctionLibrary_IsInsectoidEnabled");
static_assert(sizeof(TwInsectoidFunctionLibrary_IsInsectoidEnabled) == 0x000001, "Wrong size on TwInsectoidFunctionLibrary_IsInsectoidEnabled");
static_assert(offsetof(TwInsectoidFunctionLibrary_IsInsectoidEnabled, ReturnValue) == 0x000000, "Member 'TwInsectoidFunctionLibrary_IsInsectoidEnabled::ReturnValue' has a wrong offset!");

// Function TwInsectoid.TwInsectoidFunctionLibrary.SubmitReport
// 0x0078 (0x0078 - 0x0000)
struct TwInsectoidFunctionLibrary_SubmitReport final
{
public:
	class FString                                 Summary;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IssueType;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IssueCategory;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Severity;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerPos;                                         // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map;                                               // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Callback;                                          // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwInsectoidFunctionLibrary_SubmitReport) == 0x000008, "Wrong alignment on TwInsectoidFunctionLibrary_SubmitReport");
static_assert(sizeof(TwInsectoidFunctionLibrary_SubmitReport) == 0x000078, "Wrong size on TwInsectoidFunctionLibrary_SubmitReport");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, Summary) == 0x000000, "Member 'TwInsectoidFunctionLibrary_SubmitReport::Summary' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, IssueType) == 0x000010, "Member 'TwInsectoidFunctionLibrary_SubmitReport::IssueType' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, IssueCategory) == 0x000020, "Member 'TwInsectoidFunctionLibrary_SubmitReport::IssueCategory' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, Severity) == 0x000030, "Member 'TwInsectoidFunctionLibrary_SubmitReport::Severity' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, Description) == 0x000038, "Member 'TwInsectoidFunctionLibrary_SubmitReport::Description' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, PlayerPos) == 0x000048, "Member 'TwInsectoidFunctionLibrary_SubmitReport::PlayerPos' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, Map) == 0x000058, "Member 'TwInsectoidFunctionLibrary_SubmitReport::Map' has a wrong offset!");
static_assert(offsetof(TwInsectoidFunctionLibrary_SubmitReport, Callback) == 0x000068, "Member 'TwInsectoidFunctionLibrary_SubmitReport::Callback' has a wrong offset!");

}

