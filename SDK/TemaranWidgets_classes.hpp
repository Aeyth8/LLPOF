#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TemaranWidgets

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_classes.hpp"
#include "TemaranWidgets_structs.hpp"


namespace SDK
{

// Class TemaranWidgets.T_UserWidget
// 0x0018 (0x0278 - 0x0260)
class UT_UserWidget final : public UUserWidget
{
public:
	TArray<class FString>                         RichTextBlockArguments;                            // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UT_RichTextBlock* GetRichTextBoxParentWidget();
	void OnSynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_UserWidget">();
	}
	static class UT_UserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_UserWidget>();
	}
};
static_assert(alignof(UT_UserWidget) == 0x000008, "Wrong alignment on UT_UserWidget");
static_assert(sizeof(UT_UserWidget) == 0x000278, "Wrong size on UT_UserWidget");
static_assert(offsetof(UT_UserWidget, RichTextBlockArguments) == 0x000260, "Member 'UT_UserWidget::RichTextBlockArguments' has a wrong offset!");

// Class TemaranWidgets.T_GridPanel
// 0x0030 (0x0150 - 0x0120)
class UT_GridPanel final : public UPanelWidget
{
public:
	TArray<class FString>                         ColumnDefinitions;                                 // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         RowDefinitions;                                    // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UT_GridSlot* AddChildToGrid(class UWidget* Content);
	void SetColumnDefinition(int32 ColumnIndex, const class FString& NewColumnDefinition);
	void SetRowDefinition(int32 RowIndex, const class FString& NewRowDefinition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_GridPanel">();
	}
	static class UT_GridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_GridPanel>();
	}
};
static_assert(alignof(UT_GridPanel) == 0x000008, "Wrong alignment on UT_GridPanel");
static_assert(sizeof(UT_GridPanel) == 0x000150, "Wrong size on UT_GridPanel");
static_assert(offsetof(UT_GridPanel, ColumnDefinitions) == 0x000120, "Member 'UT_GridPanel::ColumnDefinitions' has a wrong offset!");
static_assert(offsetof(UT_GridPanel, RowDefinitions) == 0x000130, "Member 'UT_GridPanel::RowDefinitions' has a wrong offset!");

// Class TemaranWidgets.T_WidgetsPlayerController
// 0x0000 (0x0580 - 0x0580)
class AT_WidgetsPlayerController final : public APlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_WidgetsPlayerController">();
	}
	static class AT_WidgetsPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AT_WidgetsPlayerController>();
	}
};
static_assert(alignof(AT_WidgetsPlayerController) == 0x000008, "Wrong alignment on AT_WidgetsPlayerController");
static_assert(sizeof(AT_WidgetsPlayerController) == 0x000580, "Wrong size on AT_WidgetsPlayerController");

// Class TemaranWidgets.T_GridSlot
// 0x0038 (0x0070 - 0x0038)
class UT_GridSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Row;                                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowSpan;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnSpan;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Nudge;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColumn(int32 InColumn);
	void SetColumnSpan(int32 InColumnSpan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetLayer(int32 InLayer);
	void SetPadding(const struct FMargin& InPadding);
	void SetRow(int32 InRow);
	void SetRowSpan(int32 InRowSpan);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_GridSlot">();
	}
	static class UT_GridSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_GridSlot>();
	}
};
static_assert(alignof(UT_GridSlot) == 0x000008, "Wrong alignment on UT_GridSlot");
static_assert(sizeof(UT_GridSlot) == 0x000070, "Wrong size on UT_GridSlot");
static_assert(offsetof(UT_GridSlot, Padding) == 0x000038, "Member 'UT_GridSlot::Padding' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, HorizontalAlignment) == 0x000048, "Member 'UT_GridSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, VerticalAlignment) == 0x000049, "Member 'UT_GridSlot::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, Row) == 0x00004C, "Member 'UT_GridSlot::Row' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, RowSpan) == 0x000050, "Member 'UT_GridSlot::RowSpan' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, Column) == 0x000054, "Member 'UT_GridSlot::Column' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, ColumnSpan) == 0x000058, "Member 'UT_GridSlot::ColumnSpan' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, Layer) == 0x00005C, "Member 'UT_GridSlot::Layer' has a wrong offset!");
static_assert(offsetof(UT_GridSlot, Nudge) == 0x000060, "Member 'UT_GridSlot::Nudge' has a wrong offset!");

// Class TemaranWidgets.T_ConditionalReply
// 0x0008 (0x0030 - 0x0028)
class UT_ConditionalReply final : public UObject
{
public:
	bool                                          bTextAccepted;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_ConditionalReply">();
	}
	static class UT_ConditionalReply* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_ConditionalReply>();
	}
};
static_assert(alignof(UT_ConditionalReply) == 0x000008, "Wrong alignment on UT_ConditionalReply");
static_assert(sizeof(UT_ConditionalReply) == 0x000030, "Wrong size on UT_ConditionalReply");
static_assert(offsetof(UT_ConditionalReply, bTextAccepted) == 0x000028, "Member 'UT_ConditionalReply::bTextAccepted' has a wrong offset!");

// Class TemaranWidgets.T_RichTextBlock
// 0x0148 (0x07C0 - 0x0678)
class UT_RichTextBlock final : public URichTextBlock
{
public:
	bool                                          bSupportInputBindings;                             // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportHyperlinks;                                // 0x0679(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportImages;                                    // 0x067A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportStyleImages;                               // 0x067B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportWidgets;                                   // 0x067C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67D[0x3];                                      // 0x067D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UT_RichTextBlockAssetRepository>> TextBlockAssets;                                   // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   PaletteCategoryName;                               // 0x0690(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A8[0x28];                                     // 0x06A8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             TextDelegate;                                      // 0x06D0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHyperlinkClicked;                                // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWidgetCreated;                                   // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnConditional;                                     // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UT_ConditionalReply*                    Reply;                                             // 0x0710(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_718[0xA8];                                     // 0x0718(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyTextStyleFromOtherTextBlock(class UT_RichTextBlock* OtherTextBlock);
	void ForceRefresh();
	ET_InputDeviceType GetInputDeviceType();
	struct FTextBlockStyle GetTextStyle();
	struct FLinearColor GetTextStyleColor();
	struct FSlateFontInfo GetTextStyleFont();
	void SetInputDeviceType(ET_InputDeviceType NewInputDeviceType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_RichTextBlock">();
	}
	static class UT_RichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_RichTextBlock>();
	}
};
static_assert(alignof(UT_RichTextBlock) == 0x000008, "Wrong alignment on UT_RichTextBlock");
static_assert(sizeof(UT_RichTextBlock) == 0x0007C0, "Wrong size on UT_RichTextBlock");
static_assert(offsetof(UT_RichTextBlock, bSupportInputBindings) == 0x000678, "Member 'UT_RichTextBlock::bSupportInputBindings' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, bSupportHyperlinks) == 0x000679, "Member 'UT_RichTextBlock::bSupportHyperlinks' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, bSupportImages) == 0x00067A, "Member 'UT_RichTextBlock::bSupportImages' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, bSupportStyleImages) == 0x00067B, "Member 'UT_RichTextBlock::bSupportStyleImages' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, bSupportWidgets) == 0x00067C, "Member 'UT_RichTextBlock::bSupportWidgets' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, TextBlockAssets) == 0x000680, "Member 'UT_RichTextBlock::TextBlockAssets' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, PaletteCategoryName) == 0x000690, "Member 'UT_RichTextBlock::PaletteCategoryName' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, TextDelegate) == 0x0006D0, "Member 'UT_RichTextBlock::TextDelegate' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, OnHyperlinkClicked) == 0x0006E0, "Member 'UT_RichTextBlock::OnHyperlinkClicked' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, OnWidgetCreated) == 0x0006F0, "Member 'UT_RichTextBlock::OnWidgetCreated' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, OnConditional) == 0x000700, "Member 'UT_RichTextBlock::OnConditional' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlock, Reply) == 0x000710, "Member 'UT_RichTextBlock::Reply' has a wrong offset!");

// Class TemaranWidgets.T_RichTextBlockAssetRepository
// 0x01E0 (0x0208 - 0x0028)
class UT_RichTextBlockAssetRepository final : public UObject
{
public:
	TMap<class FString, class UTexture*>          TextureEntries;                                    // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class UMaterialInterface*> MaterialEntries;                                   // 0x0078(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, TSubclassOf<class UUserWidget>> WidgetEntries;                                     // 0x00C8(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FString, class UFont*>             FontEntries;                                       // 0x0118(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class UObject*>           CustomEntries;                                     // 0x0168(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomPreProcessingEntries;                        // 0x01B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_RichTextBlockAssetRepository">();
	}
	static class UT_RichTextBlockAssetRepository* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_RichTextBlockAssetRepository>();
	}
};
static_assert(alignof(UT_RichTextBlockAssetRepository) == 0x000008, "Wrong alignment on UT_RichTextBlockAssetRepository");
static_assert(sizeof(UT_RichTextBlockAssetRepository) == 0x000208, "Wrong size on UT_RichTextBlockAssetRepository");
static_assert(offsetof(UT_RichTextBlockAssetRepository, TextureEntries) == 0x000028, "Member 'UT_RichTextBlockAssetRepository::TextureEntries' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlockAssetRepository, MaterialEntries) == 0x000078, "Member 'UT_RichTextBlockAssetRepository::MaterialEntries' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlockAssetRepository, WidgetEntries) == 0x0000C8, "Member 'UT_RichTextBlockAssetRepository::WidgetEntries' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlockAssetRepository, FontEntries) == 0x000118, "Member 'UT_RichTextBlockAssetRepository::FontEntries' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlockAssetRepository, CustomEntries) == 0x000168, "Member 'UT_RichTextBlockAssetRepository::CustomEntries' has a wrong offset!");
static_assert(offsetof(UT_RichTextBlockAssetRepository, CustomPreProcessingEntries) == 0x0001B8, "Member 'UT_RichTextBlockAssetRepository::CustomPreProcessingEntries' has a wrong offset!");

// Class TemaranWidgets.T_WidgetsFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UT_WidgetsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetActionMapping(const class FString& DesiredActionName, const int32 DesiredBindingIdx, const ET_InputDeviceType InputDeviceType, struct FInputActionKeyMapping* OutMapping, int32* OutMappingIndex);
	static bool GetAxisMapping(const class FString& DesiredActionName, const int32 DesiredBindingIdx, const ET_InputDeviceType InputDeviceType, float AxisScaleRequirement, struct FInputAxisKeyMapping* OutMapping, int32* OutMappingIndex);
	static void ResetUserFocus();
	static void SetInputDeviceType(ET_InputDeviceType NewInputDeviceType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_WidgetsFunctionLibrary">();
	}
	static class UT_WidgetsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UT_WidgetsFunctionLibrary>();
	}
};
static_assert(alignof(UT_WidgetsFunctionLibrary) == 0x000008, "Wrong alignment on UT_WidgetsFunctionLibrary");
static_assert(sizeof(UT_WidgetsFunctionLibrary) == 0x000028, "Wrong size on UT_WidgetsFunctionLibrary");

// Class TemaranWidgets.T_WidgetsSamplePawn
// 0x0020 (0x02A0 - 0x0280)
class AT_WidgetsSamplePawn final : public APawn
{
public:
	FMulticastInlineDelegateProperty_             OnSampleCommand;                                   // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"T_WidgetsSamplePawn">();
	}
	static class AT_WidgetsSamplePawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AT_WidgetsSamplePawn>();
	}
};
static_assert(alignof(AT_WidgetsSamplePawn) == 0x000008, "Wrong alignment on AT_WidgetsSamplePawn");
static_assert(sizeof(AT_WidgetsSamplePawn) == 0x0002A0, "Wrong size on AT_WidgetsSamplePawn");
static_assert(offsetof(AT_WidgetsSamplePawn, OnSampleCommand) == 0x000280, "Member 'AT_WidgetsSamplePawn::OnSampleCommand' has a wrong offset!");

}

