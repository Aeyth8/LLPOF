#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Spy_SpyPack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DeceiveInc_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Spy_SpyPack.BP_Spy_SpyPack_C
// 0x0050 (0x0350 - 0x0300)
class ABP_Spy_SpyPack_C final : public ASpyPack
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      FX_Healing;                                        // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFXDropped1;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UActiveAbilityConditionComponent*       ActiveAbilityCondition;                            // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFXDropped;                                        // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URayCastConditionComponent*             RayCastCondition;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaxUseConditionComponent*              MaxUseCondition;                                   // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VFX;                                               // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFakeMovementComponent*                 FakeMovement;                                      // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaxResourceConditionComponent*         MaxResourceCondition;                              // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Spy_SpyPack(int32 EntryPoint);
	void BndEvt__BP_Spy_SpyPack_InteractableComp_K2Node_ComponentBoundEvent_1_OnInteractionDelegate__DelegateSignature(class UInteracterComponent* Interacter, class UInteractableComponent* Interactable);
	void BndEvt__InteractableComp_K2Node_ComponentBoundEvent_0_OnInteractionDelegate__DelegateSignature(class UInteracterComponent* Interacter, class UInteractableComponent* Interactable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Spy_SpyPack_C">();
	}
	static class ABP_Spy_SpyPack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Spy_SpyPack_C>();
	}
};
static_assert(alignof(ABP_Spy_SpyPack_C) == 0x000008, "Wrong alignment on ABP_Spy_SpyPack_C");
static_assert(sizeof(ABP_Spy_SpyPack_C) == 0x000350, "Wrong size on ABP_Spy_SpyPack_C");
static_assert(offsetof(ABP_Spy_SpyPack_C, UberGraphFrame) == 0x000300, "Member 'ABP_Spy_SpyPack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, FX_Healing) == 0x000308, "Member 'ABP_Spy_SpyPack_C::FX_Healing' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, VFXDropped1) == 0x000310, "Member 'ABP_Spy_SpyPack_C::VFXDropped1' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, ActiveAbilityCondition) == 0x000318, "Member 'ABP_Spy_SpyPack_C::ActiveAbilityCondition' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, VFXDropped) == 0x000320, "Member 'ABP_Spy_SpyPack_C::VFXDropped' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, RayCastCondition) == 0x000328, "Member 'ABP_Spy_SpyPack_C::RayCastCondition' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, MaxUseCondition) == 0x000330, "Member 'ABP_Spy_SpyPack_C::MaxUseCondition' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, VFX) == 0x000338, "Member 'ABP_Spy_SpyPack_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, FakeMovement) == 0x000340, "Member 'ABP_Spy_SpyPack_C::FakeMovement' has a wrong offset!");
static_assert(offsetof(ABP_Spy_SpyPack_C, MaxResourceCondition) == 0x000348, "Member 'ABP_Spy_SpyPack_C::MaxResourceCondition' has a wrong offset!");

}

