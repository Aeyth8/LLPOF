#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TwInsectoid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct TwInsectoid.BSNotifier
// 0x0030 (0x0030 - 0x0000)
struct FBSNotifier final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSNotifier) == 0x000008, "Wrong alignment on FBSNotifier");
static_assert(sizeof(FBSNotifier) == 0x000030, "Wrong size on FBSNotifier");
static_assert(offsetof(FBSNotifier, Name) == 0x000000, "Member 'FBSNotifier::Name' has a wrong offset!");
static_assert(offsetof(FBSNotifier, Version) == 0x000010, "Member 'FBSNotifier::Version' has a wrong offset!");
static_assert(offsetof(FBSNotifier, URL) == 0x000020, "Member 'FBSNotifier::URL' has a wrong offset!");

// ScriptStruct TwInsectoid.BSStacktrace
// 0x0030 (0x0030 - 0x0000)
struct FBSStacktrace final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LineNumber;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSStacktrace) == 0x000008, "Wrong alignment on FBSStacktrace");
static_assert(sizeof(FBSStacktrace) == 0x000030, "Wrong size on FBSStacktrace");
static_assert(offsetof(FBSStacktrace, File) == 0x000000, "Member 'FBSStacktrace::File' has a wrong offset!");
static_assert(offsetof(FBSStacktrace, LineNumber) == 0x000010, "Member 'FBSStacktrace::LineNumber' has a wrong offset!");
static_assert(offsetof(FBSStacktrace, Method) == 0x000020, "Member 'FBSStacktrace::Method' has a wrong offset!");

// ScriptStruct TwInsectoid.BSException
// 0x0030 (0x0030 - 0x0000)
struct FBSException final
{
public:
	class FString                                 ErrorClass;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBSStacktrace>                  StackTrace;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSException) == 0x000008, "Wrong alignment on FBSException");
static_assert(sizeof(FBSException) == 0x000030, "Wrong size on FBSException");
static_assert(offsetof(FBSException, ErrorClass) == 0x000000, "Member 'FBSException::ErrorClass' has a wrong offset!");
static_assert(offsetof(FBSException, Message) == 0x000010, "Member 'FBSException::Message' has a wrong offset!");
static_assert(offsetof(FBSException, StackTrace) == 0x000020, "Member 'FBSException::StackTrace' has a wrong offset!");

// ScriptStruct TwInsectoid.BSApp
// 0x0020 (0x0020 - 0x0000)
struct FBSApp final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSApp) == 0x000008, "Wrong alignment on FBSApp");
static_assert(sizeof(FBSApp) == 0x000020, "Wrong size on FBSApp");
static_assert(offsetof(FBSApp, ID) == 0x000000, "Member 'FBSApp::ID' has a wrong offset!");
static_assert(offsetof(FBSApp, Version) == 0x000010, "Member 'FBSApp::Version' has a wrong offset!");

// ScriptStruct TwInsectoid.BSUser
// 0x0030 (0x0030 - 0x0000)
struct FBSUser final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSUser) == 0x000008, "Wrong alignment on FBSUser");
static_assert(sizeof(FBSUser) == 0x000030, "Wrong size on FBSUser");
static_assert(offsetof(FBSUser, ID) == 0x000000, "Member 'FBSUser::ID' has a wrong offset!");
static_assert(offsetof(FBSUser, Name) == 0x000010, "Member 'FBSUser::Name' has a wrong offset!");
static_assert(offsetof(FBSUser, Email) == 0x000020, "Member 'FBSUser::Email' has a wrong offset!");

// ScriptStruct TwInsectoid.BSGameData
// 0x0050 (0x0050 - 0x0000)
struct FBSGameData final
{
public:
	struct FVector                                PlayerPos;                                         // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Screenshot;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Log;                                               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSGameData) == 0x000008, "Wrong alignment on FBSGameData");
static_assert(sizeof(FBSGameData) == 0x000050, "Wrong size on FBSGameData");
static_assert(offsetof(FBSGameData, PlayerPos) == 0x000000, "Member 'FBSGameData::PlayerPos' has a wrong offset!");
static_assert(offsetof(FBSGameData, Map) == 0x000010, "Member 'FBSGameData::Map' has a wrong offset!");
static_assert(offsetof(FBSGameData, Screenshot) == 0x000020, "Member 'FBSGameData::Screenshot' has a wrong offset!");
static_assert(offsetof(FBSGameData, Log) == 0x000030, "Member 'FBSGameData::Log' has a wrong offset!");
static_assert(offsetof(FBSGameData, EmailAddress) == 0x000040, "Member 'FBSGameData::EmailAddress' has a wrong offset!");

// ScriptStruct TwInsectoid.BSMetadata
// 0x0050 (0x0050 - 0x0000)
struct FBSMetadata final
{
public:
	struct FBSGameData                            GameData;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSMetadata) == 0x000008, "Wrong alignment on FBSMetadata");
static_assert(sizeof(FBSMetadata) == 0x000050, "Wrong size on FBSMetadata");
static_assert(offsetof(FBSMetadata, GameData) == 0x000000, "Member 'FBSMetadata::GameData' has a wrong offset!");

// ScriptStruct TwInsectoid.BSEvent
// 0x00C0 (0x00C0 - 0x0000)
struct FBSEvent final
{
public:
	TArray<struct FBSException>                   Exceptions;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Severity;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBSApp                                 App;                                               // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	struct FBSUser                                User;                                              // 0x0040(0x0030)(NativeAccessSpecifierPublic)
	struct FBSMetadata                            MetaData;                                          // 0x0070(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSEvent) == 0x000008, "Wrong alignment on FBSEvent");
static_assert(sizeof(FBSEvent) == 0x0000C0, "Wrong size on FBSEvent");
static_assert(offsetof(FBSEvent, Exceptions) == 0x000000, "Member 'FBSEvent::Exceptions' has a wrong offset!");
static_assert(offsetof(FBSEvent, Severity) == 0x000010, "Member 'FBSEvent::Severity' has a wrong offset!");
static_assert(offsetof(FBSEvent, App) == 0x000020, "Member 'FBSEvent::App' has a wrong offset!");
static_assert(offsetof(FBSEvent, User) == 0x000040, "Member 'FBSEvent::User' has a wrong offset!");
static_assert(offsetof(FBSEvent, MetaData) == 0x000070, "Member 'FBSEvent::MetaData' has a wrong offset!");

// ScriptStruct TwInsectoid.BSRequest
// 0x0050 (0x0050 - 0x0000)
struct FBSRequest final
{
public:
	class FString                                 APIKey;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBSNotifier                            Notifier;                                          // 0x0010(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FBSEvent>                       Events;                                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBSRequest) == 0x000008, "Wrong alignment on FBSRequest");
static_assert(sizeof(FBSRequest) == 0x000050, "Wrong size on FBSRequest");
static_assert(offsetof(FBSRequest, APIKey) == 0x000000, "Member 'FBSRequest::APIKey' has a wrong offset!");
static_assert(offsetof(FBSRequest, Notifier) == 0x000010, "Member 'FBSRequest::Notifier' has a wrong offset!");
static_assert(offsetof(FBSRequest, Events) == 0x000040, "Member 'FBSRequest::Events' has a wrong offset!");

// ScriptStruct TwInsectoid.ReportData
// 0x00D8 (0x00D8 - 0x0000)
struct FReportData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportType;                                        // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerPos;                                         // 0x0048(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map;                                               // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubmitScreenshot;                                 // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubmitLog;                                        // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EmailAddress;                                      // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngineCL;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildType;                                         // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Branch;                                            // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScreenshotURL;                                     // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogText;                                           // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportData) == 0x000008, "Wrong alignment on FReportData");
static_assert(sizeof(FReportData) == 0x0000D8, "Wrong size on FReportData");
static_assert(offsetof(FReportData, Title) == 0x000000, "Member 'FReportData::Title' has a wrong offset!");
static_assert(offsetof(FReportData, Summary) == 0x000010, "Member 'FReportData::Summary' has a wrong offset!");
static_assert(offsetof(FReportData, Priority) == 0x000020, "Member 'FReportData::Priority' has a wrong offset!");
static_assert(offsetof(FReportData, Category) == 0x000028, "Member 'FReportData::Category' has a wrong offset!");
static_assert(offsetof(FReportData, ReportType) == 0x000038, "Member 'FReportData::ReportType' has a wrong offset!");
static_assert(offsetof(FReportData, PlayerPos) == 0x000048, "Member 'FReportData::PlayerPos' has a wrong offset!");
static_assert(offsetof(FReportData, Map) == 0x000058, "Member 'FReportData::Map' has a wrong offset!");
static_assert(offsetof(FReportData, bSubmitScreenshot) == 0x000068, "Member 'FReportData::bSubmitScreenshot' has a wrong offset!");
static_assert(offsetof(FReportData, bSubmitLog) == 0x000069, "Member 'FReportData::bSubmitLog' has a wrong offset!");
static_assert(offsetof(FReportData, EmailAddress) == 0x000070, "Member 'FReportData::EmailAddress' has a wrong offset!");
static_assert(offsetof(FReportData, EngineCL) == 0x000080, "Member 'FReportData::EngineCL' has a wrong offset!");
static_assert(offsetof(FReportData, BuildType) == 0x000088, "Member 'FReportData::BuildType' has a wrong offset!");
static_assert(offsetof(FReportData, Branch) == 0x000098, "Member 'FReportData::Branch' has a wrong offset!");
static_assert(offsetof(FReportData, ScreenshotURL) == 0x0000B8, "Member 'FReportData::ScreenshotURL' has a wrong offset!");
static_assert(offsetof(FReportData, LogText) == 0x0000C8, "Member 'FReportData::LogText' has a wrong offset!");

}

