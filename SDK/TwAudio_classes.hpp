#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TwAudio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_classes.hpp"


namespace SDK
{

// Class TwAudio.TwAkReverbComponent
// 0x0010 (0x0290 - 0x0280)
class UTwAkReverbComponent final : public UAkLateReverbComponent
{
public:
	class FName                                   StateGroupName;                                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwAkReverbComponent">();
	}
	static class UTwAkReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwAkReverbComponent>();
	}
};
static_assert(alignof(UTwAkReverbComponent) == 0x000010, "Wrong alignment on UTwAkReverbComponent");
static_assert(sizeof(UTwAkReverbComponent) == 0x000290, "Wrong size on UTwAkReverbComponent");
static_assert(offsetof(UTwAkReverbComponent, StateGroupName) == 0x000280, "Member 'UTwAkReverbComponent::StateGroupName' has a wrong offset!");
static_assert(offsetof(UTwAkReverbComponent, StateName) == 0x000288, "Member 'UTwAkReverbComponent::StateName' has a wrong offset!");

// Class TwAudio.TwAkReverbVolume
// 0x0020 (0x0278 - 0x0258)
class ATwAkReverbVolume final : public AVolume
{
public:
	class UAkLateReverbComponent*                 LateReverbComponent;                               // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchGroup;                                       // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchState;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwAkReverbVolume">();
	}
	static class ATwAkReverbVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATwAkReverbVolume>();
	}
};
static_assert(alignof(ATwAkReverbVolume) == 0x000008, "Wrong alignment on ATwAkReverbVolume");
static_assert(sizeof(ATwAkReverbVolume) == 0x000278, "Wrong size on ATwAkReverbVolume");
static_assert(offsetof(ATwAkReverbVolume, LateReverbComponent) == 0x000258, "Member 'ATwAkReverbVolume::LateReverbComponent' has a wrong offset!");
static_assert(offsetof(ATwAkReverbVolume, SwitchGroup) == 0x000260, "Member 'ATwAkReverbVolume::SwitchGroup' has a wrong offset!");
static_assert(offsetof(ATwAkReverbVolume, SwitchState) == 0x000268, "Member 'ATwAkReverbVolume::SwitchState' has a wrong offset!");
static_assert(offsetof(ATwAkReverbVolume, SwitchValue) == 0x000270, "Member 'ATwAkReverbVolume::SwitchValue' has a wrong offset!");

// Class TwAudio.TwRTPCTrigger
// 0x0030 (0x0258 - 0x0228)
class ATwRTPCTrigger final : public ATriggerSphere
{
public:
	class FName                                   RTPCName;                                          // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinValue;                                          // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxValue;                                          // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterpolationTimeMs;                               // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             PlayerCollisionChannel;                            // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          OverlappingPlayers;                                // 0x0240(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         SphereRadius;                                      // 0x0250(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ManuallySetSphereRadius(float SetRadiusTo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwRTPCTrigger">();
	}
	static class ATwRTPCTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATwRTPCTrigger>();
	}
};
static_assert(alignof(ATwRTPCTrigger) == 0x000008, "Wrong alignment on ATwRTPCTrigger");
static_assert(sizeof(ATwRTPCTrigger) == 0x000258, "Wrong size on ATwRTPCTrigger");
static_assert(offsetof(ATwRTPCTrigger, RTPCName) == 0x000228, "Member 'ATwRTPCTrigger::RTPCName' has a wrong offset!");
static_assert(offsetof(ATwRTPCTrigger, MinValue) == 0x000230, "Member 'ATwRTPCTrigger::MinValue' has a wrong offset!");
static_assert(offsetof(ATwRTPCTrigger, MaxValue) == 0x000234, "Member 'ATwRTPCTrigger::MaxValue' has a wrong offset!");
static_assert(offsetof(ATwRTPCTrigger, InterpolationTimeMs) == 0x000238, "Member 'ATwRTPCTrigger::InterpolationTimeMs' has a wrong offset!");
static_assert(offsetof(ATwRTPCTrigger, PlayerCollisionChannel) == 0x00023C, "Member 'ATwRTPCTrigger::PlayerCollisionChannel' has a wrong offset!");
static_assert(offsetof(ATwRTPCTrigger, OverlappingPlayers) == 0x000240, "Member 'ATwRTPCTrigger::OverlappingPlayers' has a wrong offset!");
static_assert(offsetof(ATwRTPCTrigger, SphereRadius) == 0x000250, "Member 'ATwRTPCTrigger::SphereRadius' has a wrong offset!");

}

