#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TemaranWidgets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "TemaranWidgets_structs.hpp"


namespace SDK::Params
{

// Function TemaranWidgets.T_UserWidget.GetRichTextBoxParentWidget
// 0x0008 (0x0008 - 0x0000)
struct T_UserWidget_GetRichTextBoxParentWidget final
{
public:
	class UT_RichTextBlock*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_UserWidget_GetRichTextBoxParentWidget) == 0x000008, "Wrong alignment on T_UserWidget_GetRichTextBoxParentWidget");
static_assert(sizeof(T_UserWidget_GetRichTextBoxParentWidget) == 0x000008, "Wrong size on T_UserWidget_GetRichTextBoxParentWidget");
static_assert(offsetof(T_UserWidget_GetRichTextBoxParentWidget, ReturnValue) == 0x000000, "Member 'T_UserWidget_GetRichTextBoxParentWidget::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_GridPanel.AddChildToGrid
// 0x0010 (0x0010 - 0x0000)
struct T_GridPanel_AddChildToGrid final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UT_GridSlot*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridPanel_AddChildToGrid) == 0x000008, "Wrong alignment on T_GridPanel_AddChildToGrid");
static_assert(sizeof(T_GridPanel_AddChildToGrid) == 0x000010, "Wrong size on T_GridPanel_AddChildToGrid");
static_assert(offsetof(T_GridPanel_AddChildToGrid, Content) == 0x000000, "Member 'T_GridPanel_AddChildToGrid::Content' has a wrong offset!");
static_assert(offsetof(T_GridPanel_AddChildToGrid, ReturnValue) == 0x000008, "Member 'T_GridPanel_AddChildToGrid::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_GridPanel.SetColumnDefinition
// 0x0018 (0x0018 - 0x0000)
struct T_GridPanel_SetColumnDefinition final
{
public:
	int32                                         ColumnIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewColumnDefinition;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridPanel_SetColumnDefinition) == 0x000008, "Wrong alignment on T_GridPanel_SetColumnDefinition");
static_assert(sizeof(T_GridPanel_SetColumnDefinition) == 0x000018, "Wrong size on T_GridPanel_SetColumnDefinition");
static_assert(offsetof(T_GridPanel_SetColumnDefinition, ColumnIndex) == 0x000000, "Member 'T_GridPanel_SetColumnDefinition::ColumnIndex' has a wrong offset!");
static_assert(offsetof(T_GridPanel_SetColumnDefinition, NewColumnDefinition) == 0x000008, "Member 'T_GridPanel_SetColumnDefinition::NewColumnDefinition' has a wrong offset!");

// Function TemaranWidgets.T_GridPanel.SetRowDefinition
// 0x0018 (0x0018 - 0x0000)
struct T_GridPanel_SetRowDefinition final
{
public:
	int32                                         RowIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewRowDefinition;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridPanel_SetRowDefinition) == 0x000008, "Wrong alignment on T_GridPanel_SetRowDefinition");
static_assert(sizeof(T_GridPanel_SetRowDefinition) == 0x000018, "Wrong size on T_GridPanel_SetRowDefinition");
static_assert(offsetof(T_GridPanel_SetRowDefinition, RowIndex) == 0x000000, "Member 'T_GridPanel_SetRowDefinition::RowIndex' has a wrong offset!");
static_assert(offsetof(T_GridPanel_SetRowDefinition, NewRowDefinition) == 0x000008, "Member 'T_GridPanel_SetRowDefinition::NewRowDefinition' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetColumn
// 0x0004 (0x0004 - 0x0000)
struct T_GridSlot_SetColumn final
{
public:
	int32                                         InColumn;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetColumn) == 0x000004, "Wrong alignment on T_GridSlot_SetColumn");
static_assert(sizeof(T_GridSlot_SetColumn) == 0x000004, "Wrong size on T_GridSlot_SetColumn");
static_assert(offsetof(T_GridSlot_SetColumn, InColumn) == 0x000000, "Member 'T_GridSlot_SetColumn::InColumn' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetColumnSpan
// 0x0004 (0x0004 - 0x0000)
struct T_GridSlot_SetColumnSpan final
{
public:
	int32                                         InColumnSpan;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetColumnSpan) == 0x000004, "Wrong alignment on T_GridSlot_SetColumnSpan");
static_assert(sizeof(T_GridSlot_SetColumnSpan) == 0x000004, "Wrong size on T_GridSlot_SetColumnSpan");
static_assert(offsetof(T_GridSlot_SetColumnSpan, InColumnSpan) == 0x000000, "Member 'T_GridSlot_SetColumnSpan::InColumnSpan' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct T_GridSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on T_GridSlot_SetHorizontalAlignment");
static_assert(sizeof(T_GridSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on T_GridSlot_SetHorizontalAlignment");
static_assert(offsetof(T_GridSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'T_GridSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetLayer
// 0x0004 (0x0004 - 0x0000)
struct T_GridSlot_SetLayer final
{
public:
	int32                                         InLayer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetLayer) == 0x000004, "Wrong alignment on T_GridSlot_SetLayer");
static_assert(sizeof(T_GridSlot_SetLayer) == 0x000004, "Wrong size on T_GridSlot_SetLayer");
static_assert(offsetof(T_GridSlot_SetLayer, InLayer) == 0x000000, "Member 'T_GridSlot_SetLayer::InLayer' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct T_GridSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetPadding) == 0x000004, "Wrong alignment on T_GridSlot_SetPadding");
static_assert(sizeof(T_GridSlot_SetPadding) == 0x000010, "Wrong size on T_GridSlot_SetPadding");
static_assert(offsetof(T_GridSlot_SetPadding, InPadding) == 0x000000, "Member 'T_GridSlot_SetPadding::InPadding' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetRow
// 0x0004 (0x0004 - 0x0000)
struct T_GridSlot_SetRow final
{
public:
	int32                                         InRow;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetRow) == 0x000004, "Wrong alignment on T_GridSlot_SetRow");
static_assert(sizeof(T_GridSlot_SetRow) == 0x000004, "Wrong size on T_GridSlot_SetRow");
static_assert(offsetof(T_GridSlot_SetRow, InRow) == 0x000000, "Member 'T_GridSlot_SetRow::InRow' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetRowSpan
// 0x0004 (0x0004 - 0x0000)
struct T_GridSlot_SetRowSpan final
{
public:
	int32                                         InRowSpan;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetRowSpan) == 0x000004, "Wrong alignment on T_GridSlot_SetRowSpan");
static_assert(sizeof(T_GridSlot_SetRowSpan) == 0x000004, "Wrong size on T_GridSlot_SetRowSpan");
static_assert(offsetof(T_GridSlot_SetRowSpan, InRowSpan) == 0x000000, "Member 'T_GridSlot_SetRowSpan::InRowSpan' has a wrong offset!");

// Function TemaranWidgets.T_GridSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct T_GridSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_GridSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on T_GridSlot_SetVerticalAlignment");
static_assert(sizeof(T_GridSlot_SetVerticalAlignment) == 0x000001, "Wrong size on T_GridSlot_SetVerticalAlignment");
static_assert(offsetof(T_GridSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'T_GridSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function TemaranWidgets.T_RichTextBlock.CopyTextStyleFromOtherTextBlock
// 0x0008 (0x0008 - 0x0000)
struct T_RichTextBlock_CopyTextStyleFromOtherTextBlock final
{
public:
	class UT_RichTextBlock*                       OtherTextBlock;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_RichTextBlock_CopyTextStyleFromOtherTextBlock) == 0x000008, "Wrong alignment on T_RichTextBlock_CopyTextStyleFromOtherTextBlock");
static_assert(sizeof(T_RichTextBlock_CopyTextStyleFromOtherTextBlock) == 0x000008, "Wrong size on T_RichTextBlock_CopyTextStyleFromOtherTextBlock");
static_assert(offsetof(T_RichTextBlock_CopyTextStyleFromOtherTextBlock, OtherTextBlock) == 0x000000, "Member 'T_RichTextBlock_CopyTextStyleFromOtherTextBlock::OtherTextBlock' has a wrong offset!");

// Function TemaranWidgets.T_RichTextBlock.GetInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct T_RichTextBlock_GetInputDeviceType final
{
public:
	ET_InputDeviceType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_RichTextBlock_GetInputDeviceType) == 0x000001, "Wrong alignment on T_RichTextBlock_GetInputDeviceType");
static_assert(sizeof(T_RichTextBlock_GetInputDeviceType) == 0x000001, "Wrong size on T_RichTextBlock_GetInputDeviceType");
static_assert(offsetof(T_RichTextBlock_GetInputDeviceType, ReturnValue) == 0x000000, "Member 'T_RichTextBlock_GetInputDeviceType::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_RichTextBlock.GetTextStyle
// 0x0270 (0x0270 - 0x0000)
struct T_RichTextBlock_GetTextStyle final
{
public:
	struct FTextBlockStyle                        ReturnValue;                                       // 0x0000(0x0270)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_RichTextBlock_GetTextStyle) == 0x000008, "Wrong alignment on T_RichTextBlock_GetTextStyle");
static_assert(sizeof(T_RichTextBlock_GetTextStyle) == 0x000270, "Wrong size on T_RichTextBlock_GetTextStyle");
static_assert(offsetof(T_RichTextBlock_GetTextStyle, ReturnValue) == 0x000000, "Member 'T_RichTextBlock_GetTextStyle::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_RichTextBlock.GetTextStyleColor
// 0x0010 (0x0010 - 0x0000)
struct T_RichTextBlock_GetTextStyleColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_RichTextBlock_GetTextStyleColor) == 0x000004, "Wrong alignment on T_RichTextBlock_GetTextStyleColor");
static_assert(sizeof(T_RichTextBlock_GetTextStyleColor) == 0x000010, "Wrong size on T_RichTextBlock_GetTextStyleColor");
static_assert(offsetof(T_RichTextBlock_GetTextStyleColor, ReturnValue) == 0x000000, "Member 'T_RichTextBlock_GetTextStyleColor::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_RichTextBlock.GetTextStyleFont
// 0x0058 (0x0058 - 0x0000)
struct T_RichTextBlock_GetTextStyleFont final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_RichTextBlock_GetTextStyleFont) == 0x000008, "Wrong alignment on T_RichTextBlock_GetTextStyleFont");
static_assert(sizeof(T_RichTextBlock_GetTextStyleFont) == 0x000058, "Wrong size on T_RichTextBlock_GetTextStyleFont");
static_assert(offsetof(T_RichTextBlock_GetTextStyleFont, ReturnValue) == 0x000000, "Member 'T_RichTextBlock_GetTextStyleFont::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_RichTextBlock.SetInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct T_RichTextBlock_SetInputDeviceType final
{
public:
	ET_InputDeviceType                            NewInputDeviceType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_RichTextBlock_SetInputDeviceType) == 0x000001, "Wrong alignment on T_RichTextBlock_SetInputDeviceType");
static_assert(sizeof(T_RichTextBlock_SetInputDeviceType) == 0x000001, "Wrong size on T_RichTextBlock_SetInputDeviceType");
static_assert(offsetof(T_RichTextBlock_SetInputDeviceType, NewInputDeviceType) == 0x000000, "Member 'T_RichTextBlock_SetInputDeviceType::NewInputDeviceType' has a wrong offset!");

// Function TemaranWidgets.T_WidgetsFunctionLibrary.GetActionMapping
// 0x0048 (0x0048 - 0x0000)
struct T_WidgetsFunctionLibrary_GetActionMapping final
{
public:
	class FString                                 DesiredActionName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredBindingIdx;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ET_InputDeviceType                            InputDeviceType;                                   // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 OutMapping;                                        // 0x0018(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         OutMappingIndex;                                   // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(T_WidgetsFunctionLibrary_GetActionMapping) == 0x000008, "Wrong alignment on T_WidgetsFunctionLibrary_GetActionMapping");
static_assert(sizeof(T_WidgetsFunctionLibrary_GetActionMapping) == 0x000048, "Wrong size on T_WidgetsFunctionLibrary_GetActionMapping");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetActionMapping, DesiredActionName) == 0x000000, "Member 'T_WidgetsFunctionLibrary_GetActionMapping::DesiredActionName' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetActionMapping, DesiredBindingIdx) == 0x000010, "Member 'T_WidgetsFunctionLibrary_GetActionMapping::DesiredBindingIdx' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetActionMapping, InputDeviceType) == 0x000014, "Member 'T_WidgetsFunctionLibrary_GetActionMapping::InputDeviceType' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetActionMapping, OutMapping) == 0x000018, "Member 'T_WidgetsFunctionLibrary_GetActionMapping::OutMapping' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetActionMapping, OutMappingIndex) == 0x000040, "Member 'T_WidgetsFunctionLibrary_GetActionMapping::OutMappingIndex' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetActionMapping, ReturnValue) == 0x000044, "Member 'T_WidgetsFunctionLibrary_GetActionMapping::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_WidgetsFunctionLibrary.GetAxisMapping
// 0x0050 (0x0050 - 0x0000)
struct T_WidgetsFunctionLibrary_GetAxisMapping final
{
public:
	class FString                                 DesiredActionName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredBindingIdx;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ET_InputDeviceType                            InputDeviceType;                                   // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AxisScaleRequirement;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputAxisKeyMapping                   OutMapping;                                        // 0x0020(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         OutMappingIndex;                                   // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(T_WidgetsFunctionLibrary_GetAxisMapping) == 0x000008, "Wrong alignment on T_WidgetsFunctionLibrary_GetAxisMapping");
static_assert(sizeof(T_WidgetsFunctionLibrary_GetAxisMapping) == 0x000050, "Wrong size on T_WidgetsFunctionLibrary_GetAxisMapping");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, DesiredActionName) == 0x000000, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::DesiredActionName' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, DesiredBindingIdx) == 0x000010, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::DesiredBindingIdx' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, InputDeviceType) == 0x000014, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::InputDeviceType' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, AxisScaleRequirement) == 0x000018, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::AxisScaleRequirement' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, OutMapping) == 0x000020, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::OutMapping' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, OutMappingIndex) == 0x000048, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::OutMappingIndex' has a wrong offset!");
static_assert(offsetof(T_WidgetsFunctionLibrary_GetAxisMapping, ReturnValue) == 0x00004C, "Member 'T_WidgetsFunctionLibrary_GetAxisMapping::ReturnValue' has a wrong offset!");

// Function TemaranWidgets.T_WidgetsFunctionLibrary.SetInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct T_WidgetsFunctionLibrary_SetInputDeviceType final
{
public:
	ET_InputDeviceType                            NewInputDeviceType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(T_WidgetsFunctionLibrary_SetInputDeviceType) == 0x000001, "Wrong alignment on T_WidgetsFunctionLibrary_SetInputDeviceType");
static_assert(sizeof(T_WidgetsFunctionLibrary_SetInputDeviceType) == 0x000001, "Wrong size on T_WidgetsFunctionLibrary_SetInputDeviceType");
static_assert(offsetof(T_WidgetsFunctionLibrary_SetInputDeviceType, NewInputDeviceType) == 0x000000, "Member 'T_WidgetsFunctionLibrary_SetInputDeviceType::NewInputDeviceType' has a wrong offset!");

}

